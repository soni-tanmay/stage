// Mocks generated by Mockito 5.4.5 from annotations
// in stage/test/blocs/movie_list/movie_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stage/models/movie_details_model.dart' as _i3;
import 'package:stage/models/movie_list_model.dart' as _i2;
import 'package:stage/repositories/movie_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieList_0 extends _i1.SmartFake implements _i2.MovieList {
  _FakeMovieList_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieDetails_1 extends _i1.SmartFake implements _i3.MovieDetails {
  _FakeMovieDetails_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i4.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.MovieList> fetchMovies(int? page) =>
      (super.noSuchMethod(
            Invocation.method(#fetchMovies, [page]),
            returnValue: _i5.Future<_i2.MovieList>.value(
              _FakeMovieList_0(this, Invocation.method(#fetchMovies, [page])),
            ),
          )
          as _i5.Future<_i2.MovieList>);

  @override
  _i5.Future<_i3.MovieDetails> fetchMovieDetails(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchMovieDetails, [movieId]),
            returnValue: _i5.Future<_i3.MovieDetails>.value(
              _FakeMovieDetails_1(
                this,
                Invocation.method(#fetchMovieDetails, [movieId]),
              ),
            ),
          )
          as _i5.Future<_i3.MovieDetails>);

  @override
  _i5.Future<List<_i2.Movie>> getFavoriteMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteMovies, []),
            returnValue: _i5.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i5.Future<List<_i2.Movie>>);

  @override
  _i5.Future<void> addMovieToFavorites(_i2.Movie? movie) =>
      (super.noSuchMethod(
            Invocation.method(#addMovieToFavorites, [movie]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeMovieFromFavorites(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMovieFromFavorites, [movieId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isMovieFavorite(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#isMovieFavorite, [movieId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
